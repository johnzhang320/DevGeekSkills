 Adapter Pattern

This pattern is easy to understand as the real world is full of adapters.   
For example consider a USB to Ethernet adapter. We need this when we have an 
Ethernet interface on one end and USB on the other. Since they are incompatible 
with each other. we use an adapter that converts one to other. This example is 
pretty analogous to Object Oriented Adapters. In design, adapters are used when we 
have a class (Client) expecting some type of object and we have an object (Adaptee) 
offering the same features but exposing a different interface.

Adapter pattern works as a bridge between two incompatible interfaces. This type of 
design pattern comes under structural pattern as this pattern combines the capability 
of two independent interfaces.

This pattern involves a single class which is responsible to join functionalities of i
ndependent or incompatible interfaces. A real life example could be a case of card 
reader which acts as an adapter between memory card and a laptop. You plugin the memory 
card into card reader and card reader into the laptop so that memory card can be read via laptop.

To use an adapter:

The client makes a request to the adapter by calling a method on it using the target interface.
The adapter translates that request on the adaptee using the adaptee interface.
Client receive the results of the call and is unaware of adapter’s presence.

Definition
The adapter pattern convert the interface of a class into another interface clients expect. 
Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.


1. The adapter design pattern is a structural design pattern that allows two unrelated/uncommon 
 interfaces to work together. In other words, the adapter pattern makes two incompatible interfaces 
 compatible without changing their existing code.
 
2. Interfaces may be incompatible, but the inner functionality should match the requirement.

3. The adapter pattern is often used to make existing classes work with others without modifying their 
source code.

4. Adapter patterns use a single class (the adapter class) to join functionalities of independent or 
incompatible interfaces/classes.

5. The adapter pattern also is known as the wrapper, an alternative naming shared with the decorator 
design pattern.

6. This pattern converts the (incompatible) interface of a class (the adaptee) into another interface
 (the target) that clients require.
 
7. The adapter pattern also lets classes work together, which, otherwise, couldn't have worked, because 
of the incompatible interfaces.

8. For example, let's take a look at a person traveling in different countries with their laptop and mobile 
devices. We have a different electric socket, volt, and frequency measured in different countries and that
 makes the use of any appliance of one country to be freely used in a different country. In the United 
 Kingdom, we use Type G socket with 230 volts and 50 Hz frequency. In the United States, we use Type A 
 and Type B sockets with 120 volts and 60 Hz frequency. In India, we use Type C, Type D. and Type M 
 sockets with 230 volts and 50 Hz. lastly, in Japan, we use Type A and Type B sockets with 110 volts 
 and 50 Hz frequency. This makes the appliances we carry incompatible with the electric specifications 
 we have at different places.
This makes the adapter tool essential because it can make/convert incompatible code into compatible code. 
Please notice here that we have not achieved anything additional here — there is no additional functionality, 
only compatibility.


package design.adapter;
import design.adapter.extra.Triangle;
public class TriangleAdapter extends Triangle implements Shape {
      public TriangleAdapter() {
      super();
      }
      @Override
      public void draw() {
      this.drawShape();
      }
      @Override
      public void resize() {
      System.out.println("Triangle can't be resized. Please create new one with required values.");
      }
      @Override
      public String description() {
      return "Triangle object";
      }
      @Override
      public boolean isHide() {
      return false;
      }
}