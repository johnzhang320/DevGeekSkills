Abstract Factory patterns work around a super-factory which creates other factories. This factory is also called as factory of
 factories. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.

In Abstract Factory pattern an interface is responsible for creating a factory of related objects without explicitly specifying their 
classes. Each generated factory can give the objects as per the Factory pattern.


Idea about abstract factory
(1) first of all 
    builder each single factory first
(2) In order to build single factory as class
    create interface which include basic behavior as service Interface
    create interface implemented (concrete) classes
(3) in single factory getService(choice:String):Service Interface
(4) create another single factory -> interface->Implement
(5) create Abstract Class as Abstract Factory , getService1(choice:String):service1,getService2(choice:String):service2
(6) let single factory extends Abstract Factory and implements all getServices, if not belong to it, return null
(6) FactoryDelegate class getFactory(choice:String):Abstractfactory

 Advantages

This pattern is particularly useful when the client doesn’t know exactly what type to create.

Isolation of concrete classes: The Abstract Factory pattern helps you control the classes of objects that an application creates.
 Because a factory encapsulates the responsibility and the process of creating product objects, it isolates clients from implementation
classes. Clients manipulate instances through their abstract interfaces. Product class names are isolated in the implementation of 
the concrete factory; they do not appear in client code.
Exchanging Product Families easily: The class of a concrete factory appears only once in an application, that is where it’s instantiated. 
This makes it easy to change the concrete factory an application uses. It can use various product configurations simply by changing the 
concrete factory. Because an abstract factory creates a complete family of products, the whole product family changes at once.
Promoting consistency among products: When product objects in a family are designed to work together, it’s important that an application use 
objects from only one family at a time. AbstractFactory makes this easy to enforce.n.


Disadvantages

Difficult to support new kind of products: Extending abstract factories to produce new kinds of Products isn’t easy. That’s because the 
AbstractFactory interface fixes the set of products that can be created. Supporting new kinds of products requires extending the factory 
nterface, which involves changing the AbstractFactory class and all of its subclasses.
 
 
 In Walmart Lab, Abstract Factory can be extends by put all kinds of services into a Map<ServiceKey, ServiceInterface> and injexted this 
 Map content by lazy loading via Spring XML configuration file, which extends the new behaviors without check factory code at all 