Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, 
its depenedent objects are to be notified automatically. Observer pattern falls under behavioral pattern category.

Implementation
Observer pattern uses three actor classes. Subject, Observer and Client. Subject is an object having methods to 
attach and detach observers to a client object. We have created an abstract class Observer and a concrete class 
Subject that is extending class Observer.

ObserverPatternDemo, our demo class, will use Subject and concrete class 

Subject is core , which create ArrayList<Observer> Obsververs , in Observer abstract class define subject and void update()
Subject provide adding method arraylist<Observer> list , in NoticeAll, we iterate the list, take concrete class of each Observer
as handler.update()

Concrete classes extends abstract class Observer 